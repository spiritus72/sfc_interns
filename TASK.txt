This is the list of tasks of the second phase of the recruitment process for the intern position:

https://wiki.opnfv.org/display/DEV/Intern+Project%3A+kubernetes-sfc+scenario+investigation+and+prototype

Here is the list of tasks:

#1 - Create a github account (if you don't have one yet) and fork this repo. We would like you to write down the answers of the questions we ask in the forked version of this text file. If the task requires some practical exercises, we would like you to write every command you use

Answer#1 - Done


#2 - Set up the VPN to connect to our lab. To do so, read the instructions in the next link under the section "Using the VPN":

https://wiki.opnfv.org/display/INF/Lab-as-a-Service+at+the+UNH-IOL

Your username and password for the VPN were provided to you in the mail

Answer#2 - Done


#3 - Connect to our server (10.10.100.21) using ssh with username opnfv and the same for password

Answer#3 - Done: ssh opnfv@10.10.100.21


#4 - How would you ssh our server without having to write the password? If you know a way, apart from briefly explaining how, please try to do it. HINT: Restarting the sshd process (ssh server) is not needed

Answer#4 - Thanks for the hint :)

    In order to ssh the server without having to write the password I'll have to generate an SSH Keypair which will allow me to identify myself without using a password.
    
    First I will create my SSH Keypair by running ssh-keygen on my local machine and this will create an id_rsa and id_rsa.pub file.
    
    Next I copy the public key to the server with ssh-copy-id. It'll prompt for the SSH password you gave me, when I type it and if all completes successfully I'll be able to access the server via ssh opnfv@10.10.100.21 without needing a             password.
    
    ##Practical steps(Commands)
    
	  ######################################################################
      spiritus@spiritus-HP-ProBook-450-G4:~$ ssh-keygen
      spiritus@spiritus-HP-ProBook-450-G4:~$ ssh-copy-id opnfv@10.10.100.21
      spiritus@spiritus-HP-ProBook-450-G4:~$ ssh opnfv@10.10.100.21
      ######################################################################
      
      Now you can login without typing a password :)


#5 - ssh to your VM running in the server. The ip was provided in the mail

Answer#5 - Done: ssh root@192.168.122.3


#6 - How would you ssh directly from your computer to the VM without having to use ssh twice (one to connect to the server and another one to connect to the VM)? If you know a way, apart from briefly explaining how, please try to do it.

Answer#6 - By opening a SOCKS proxy via an intermediate host
	
	Command: ssh -D 8000 -J ssh opnfv@10.10.100.21 root@192.168.122.3
	Note: I needed to upgrade to OpenSSH version 7.3 (released in August 2016) to use this method.
	
	On older versions(<=OpenSSH_7.2p2) I used this
		Command: ssh -L 8001:localhost:8002 opnfv@10.10.100.21 -t ssh -D 8002 root@192.168.122.3

	Note: To upgrade to OpenSSH version 7.3 in Ubuntu 16.04 I had to install and compile from source.



#7 - Install docker inside the VM

Answer#7 - Done


#8 - Create 2 docker containers (use opensuse or ubuntu as their operating system) making sure that they don't stop when you leave them. From now on, we will call these containers: container1 and container2

Answer#8 - Done: docker run --name container1 -it ubuntu
				 CTRL-q
				 docker run --name container2 -it ubuntu
				 CTRL-q


#9 - Make sure you can ping between both containers

Answer#9 - Done: docker attach container1 
apt update && apt install iputils-ping
ping 172.17.0.3
##Container2
docker attach container2
apt update && apt install iputils-ping
ping 172.17.0.2


#10 - Explain what are the used networking protocols and the exchanged packets that appear in order for ping to be successful (e.g. container2 first sends a UDP packet with the IP of container 1...)

Answer#10 - First container2 sends an ARP packet with the IP of container1 to discover the MAC address associated with container1 IP address. container1 will respond with a unicast ARP reply.

Next an ICMP echo-request packet is crafted with the container2 MAC and IP addresses as the source, and container1 MAC(discovered from the ARP request) and IP addresses as the destination.

When container1 receives it, it first examines the MAC address to make sure that it matches the MAC address of the interface that received the packet. If it matches then it checks the IP address to make sure that it matches the IP address on the interface. If all of these check out then the packet will be handled by ICMP, which in turn is handled by the kernel. If not, the packet is dropped.

For the ICMP reply things work in pretty much the same way, except that the container1 doesn't need to send an ARP request, since it received a packet with an IP/MAC address pair it can install that directly to the ARP cache instead.


#11 - Describe in detail what is the path the packets follow since they leave the interface inside container1 until they reach the interface inside container2

Answer#11 - They are considered to be in the same network, so from the interface inside container1 the packets will move to the "bridge" gateway that was automatically created when docker was installed on the host, which in turn will forward the packets to the interface of container2.


#12 - Imagine, container1 and container2 are in different VMs or servers. What do you think would change from what you described in #11?

Answer#12 - In this case they are no longer in the same network

#13 - Push this file with the answers to your private github repository

#14 - Send an email to Dimitris and Manuel with a link to the document in your github repo


Please contact Dimitris or Manuel if you get stuck in any of the steps
